use crate::config_engine::types::{ConfigFile, DeviceConfig, StepType, ErrorAction, TransportType};
use crate::transport::{Transport, SerialTransport};
use crate::device::{DeviceCommands, EltexEsr200};
use crate::error::{Error, Result};
use std::time::Duration;
use std::thread;

/// –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
pub struct ConfigExecutor {
    config: ConfigFile,
}

impl ConfigExecutor {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn new(config: ConfigFile) -> Self {
        Self { config }
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    pub fn execute_device(&self, device_id: &str) -> Result<ExecutionResult> {
        let device_config = self.config.devices.get(device_id)
            .ok_or_else(|| Error::ConfigValidation(format!("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", device_id)))?;

        println!("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", device_config.device_info.name);
        
        let mut result = ExecutionResult::new(device_id.to_string());
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–∑–∞–≥–ª—É—à–∫–∞, —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ create_device)
        let transport = self.create_transport(device_config)?;
        
        // –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
        let mut device = self.create_device(transport, device_config)?;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
        for step in &device_config.command_sequence {
            match self.execute_step(&mut device, step, device_config) {
                Ok(output) => {
                    result.add_success(step.name.clone(), output);
                    
                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
                    thread::sleep(Duration::from_millis(self.config.global_settings.command_delay_ms));
                }
                Err(e) => {
                    result.add_error(step.name.clone(), e.to_string());
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                    match &step.on_error {
                        ErrorAction::Stop => {
                            println!("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ —à–∞–≥–µ '{}'", step.name);
                            break;
                        }
                        ErrorAction::Continue => {
                            println!("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –≤ —à–∞–≥–µ '{}'", step.name);
                            continue;
                        }
                        ErrorAction::Retry => {
                            println!("üîÑ –ü–æ–≤—Ç–æ—Ä —à–∞–≥–∞ '{}' –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏", step.name);
                            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–∞
                            continue;
                        }
                        ErrorAction::GotoStep(_target) => {
                            println!("‚ÜóÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–æ–º—É —à–∞–≥—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");
                            continue;
                        }
                    }
                }
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if let Err(e) = device.disconnect() {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {}", e);
        }

        Ok(result)
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ –∫–æ–º–∞–Ω–¥—ã
    fn execute_step(
        &self, 
        device: &mut Box<dyn DeviceCommands>, 
        step: &crate::config_engine::types::CommandStep,
        device_config: &DeviceConfig
    ) -> Result<String> {
        println!("  üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: {}", step.name);
        
        match &step.step_type {
            StepType::Login => {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
                self.execute_login(device.as_mut(), device_config)
            }
            StepType::Logout => {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥
                device.execute_command("exit")
            }
            StepType::Command { command, expected_prompt: _ } => {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                device.execute_command(command)
            }
            StepType::DeviceOperation { operation, parameters } => {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                device.execute_device_operation(operation, parameters)
            }
            StepType::Delay { milliseconds } => {
                // –ü–∞—É–∑–∞
                println!("    ‚è±Ô∏è –ü–∞—É–∑–∞ {} –º—Å", milliseconds);
                thread::sleep(Duration::from_millis(*milliseconds));
                Ok("Pause completed".to_string())
            }
            StepType::WaitPrompt { prompt: _ } => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
                println!("    ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");
                Ok("Prompt wait completed".to_string())
            }
            StepType::CheckResponse { contains: _, fail_if_not_found: _ } => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–∞
                println!("    ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");
                Ok("Response check completed".to_string())
            }
        }
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    fn execute_login(&self, device: &mut dyn DeviceCommands, device_config: &DeviceConfig) -> Result<String> {
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        
        let username = &device_config.credentials.username;
        let password = &device_config.credentials.password;
        
        println!("    üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ '{}'", username);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let _response1 = device.execute_command(username)?;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        let response2 = device.execute_command(password)?;
        
        Ok(response2)
    }

    /// –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    fn create_transport(&self, device_config: &DeviceConfig) -> Result<Box<dyn Transport>> {
        match device_config.connection.transport {
            TransportType::Serial => {
                let baud_rate = device_config.connection.baud_rate.unwrap_or(115200);
                let transport = SerialTransport::new(device_config.connection.host.clone(), baud_rate);
                Ok(Box::new(transport))
            }
            TransportType::Telnet => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Telnet —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                Err(Error::ConfigValidation("Telnet —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω".to_string()))
            }
            TransportType::Ssh => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å SSH —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                Err(Error::ConfigValidation("SSH —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω".to_string()))
            }
            TransportType::Http => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å HTTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                Err(Error::ConfigValidation("HTTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω".to_string()))
            }
            TransportType::Https => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å HTTPS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                Err(Error::ConfigValidation("HTTPS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω".to_string()))
            }
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    fn create_device(&self, _transport: Box<dyn Transport>, device_config: &DeviceConfig) -> Result<Box<dyn DeviceCommands>> {
        match device_config.device_info.vendor.as_str() {
            "Eltex" => {
                // –î–ª—è Eltex —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–ø—Ä—è–º—É—é
                if let TransportType::Serial = device_config.connection.transport {
                    let baud_rate = device_config.connection.baud_rate.unwrap_or(115200);
                    let mut serial_transport = SerialTransport::new(device_config.connection.host.clone(), baud_rate);
                    
                    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
                    serial_transport.connect()?;
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                    let timeout = Duration::from_secs(
                        device_config.connection.timeout_seconds
                            .unwrap_or(self.config.global_settings.default_timeout_seconds)
                    );
                    serial_transport.set_timeout(timeout)?;
                    
                    let eltex_device = EltexEsr200::new(serial_transport)?;
                    Ok(Box::new(eltex_device))
                } else {
                    Err(Error::ConfigValidation("Eltex –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Serial —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç".to_string()))
                }
            }
            "Cisco" => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É Cisco
                Err(Error::ConfigValidation("Cisco —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã".to_string()))
            }
            "Ubuntu" => {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É Linux —Å–µ—Ä–≤–µ—Ä–æ–≤
                Err(Error::ConfigValidation("Linux —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã".to_string()))
            }
            vendor => {
                Err(Error::ConfigValidation(format!("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {}", vendor)))
            }
        }
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    pub fn execute_all_devices(&self) -> Result<Vec<ExecutionResult>> {
        let mut results = Vec::new();
        
        for (device_id, _) in &self.config.devices {
            match self.execute_device(device_id) {
                Ok(result) => results.push(result),
                Err(e) => {
                    let mut error_result = ExecutionResult::new(device_id.clone());
                    error_result.add_error("connection".to_string(), e.to_string());
                    results.push(error_result);
                }
            }
        }
        
        Ok(results)
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    pub fn config(&self) -> &ConfigFile {
        &self.config
    }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
#[derive(Debug, Clone)]
pub struct ExecutionResult {
    pub device_id: String,
    pub successful_commands: Vec<CommandResult>,
    pub failed_commands: Vec<CommandError>,
    pub execution_time: std::time::Duration,
}

#[derive(Debug, Clone)]
pub struct CommandResult {
    pub command_name: String,
    pub output: String,
    pub execution_time: std::time::Duration,
}

#[derive(Debug, Clone)]
pub struct CommandError {
    pub command_name: String,
    pub error_message: String,
}

impl ExecutionResult {
    fn new(device_id: String) -> Self {
        Self {
            device_id,
            successful_commands: Vec::new(),
            failed_commands: Vec::new(),
            execution_time: std::time::Duration::default(),
        }
    }

    fn add_success(&mut self, command_name: String, output: String) {
        self.successful_commands.push(CommandResult {
            command_name,
            output,
            execution_time: std::time::Duration::default(), // TODO: –ò–∑–º–µ—Ä—è—Ç—å –≤—Ä–µ–º—è
        });
    }

    fn add_error(&mut self, command_name: String, error_message: String) {
        self.failed_commands.push(CommandError {
            command_name,
            error_message,
        });
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    pub fn is_success(&self) -> bool {
        self.failed_commands.is_empty()
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    pub fn success_count(&self) -> usize {
        self.successful_commands.len()
    }

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    pub fn error_count(&self) -> usize {
        self.failed_commands.len()
    }
} 