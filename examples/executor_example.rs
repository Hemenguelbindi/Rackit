use rackit::{create_executor, create_example_config, Result};

fn main() -> Result<()> {
    println!("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    println!("\nüìù –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
    create_example_config("demo_config.toml")?;
    println!("‚úÖ –§–∞–π–ª 'demo_config.toml' —Å–æ–∑–¥–∞–Ω");
    
    // –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    println!("\nüîß –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...");
    let executor = create_executor("demo_config.toml")?;
    println!("‚úÖ –î–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    println!("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:");
    for (device_id, device_config) in &executor.config().devices {
        println!("  üì± {} - {} ({})", 
            device_id, 
            device_config.device_info.name,
            device_config.device_info.vendor
        );
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Eltex —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã)
    println!("\nüéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è Eltex —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...");
    
    // –ù–∞—Ö–æ–¥–∏–º Eltex —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    let eltex_device_id = executor.config().devices
        .iter()
        .find(|(_, config)| config.device_info.vendor == "Eltex")
        .map(|(id, _)| id.as_str());
    
    match eltex_device_id {
        Some(device_id) => {
            println!("üîç –ù–∞–π–¥–µ–Ω–æ Eltex —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {}", device_id);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
            match executor.execute_device(device_id) {
                Ok(result) => {
                    println!("\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
                    println!("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                    println!("      - –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {}", result.success_count());
                    println!("      - –ù–µ—É–¥–∞—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {}", result.error_count());
                    println!("      - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {}", 
                        if result.is_success() { "‚úÖ –£—Å–ø–µ—Ö" } else { "‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏" }
                    );
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                    if !result.successful_commands.is_empty() {
                        println!("\n   üéâ –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
                        for cmd_result in &result.successful_commands {
                            println!("      ‚Ä¢ {}: {}", 
                                cmd_result.command_name,
                                cmd_result.output.lines().next().unwrap_or("").chars().take(50).collect::<String>()
                            );
                        }
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                    if !result.failed_commands.is_empty() {
                        println!("\n   ‚ùå –û—à–∏–±–∫–∏:");
                        for cmd_error in &result.failed_commands {
                            println!("      ‚Ä¢ {}: {}", cmd_error.command_name, cmd_error.error_message);
                        }
                    }
                }
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}", e);
                    println!("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
                    println!("   ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ /dev/ttyS0");
                    println!("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞");
                    println!("   ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç");
                    println!("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç—É");
                }
            }
        }
        None => {
            println!("‚ö†Ô∏è Eltex —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            println!("\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–º–Ω–æ–≥–∏–µ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è –æ—à–∏–±–∫–æ–π)...");
            
            match executor.execute_all_devices() {
                Ok(results) => {
                    println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {} —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", results.len());
                    for result in results {
                        println!("  {} - {} ({})", 
                            if result.is_success() { "‚úÖ" } else { "‚ùå" },
                            result.device_id,
                            if result.is_success() { 
                                format!("{} –∫–æ–º–∞–Ω–¥", result.success_count()) 
                            } else { 
                                result.failed_commands.first()
                                    .map(|e| e.error_message.clone())
                                    .unwrap_or_else(|| "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞".to_string())
                            }
                        );
                    }
                }
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}", e);
                }
            }
        }
    }
    
    println!("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("\nüí° –ß—Ç–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:");
    println!("   ‚úÖ –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ TOML —Ñ–∞–π–ª–∞");
    println!("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
    println!("   ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    println!("   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    println!("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
    println!("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏ –ø–∞—É–∑ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    
    Ok(())
} 