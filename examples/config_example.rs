use rackit::{load_config, create_example_config, Result};
use rackit::config_engine::types::{StepType, ErrorAction};

fn main() -> Result<()> {
    println!("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    println!("\nüìù –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
    create_example_config("universal_config.toml")?;
    println!("‚úÖ –§–∞–π–ª 'universal_config.toml' —Å–æ–∑–¥–∞–Ω");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    println!("\nüìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...");
    let config = load_config("universal_config.toml")?;
    
    println!("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    println!("   üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
    println!("      - –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤: {}", config.global_settings.max_retries);
    println!("      - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏: {} –º—Å", config.global_settings.command_delay_ms);
    println!("      - –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {} —Å–µ–∫", config.global_settings.default_timeout_seconds);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    println!("\nüñ•Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {}", config.devices.len());
    for (device_id, device_config) in &config.devices {
        println!("\n  üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {}", device_id);
        println!("     –ù–∞–∑–≤–∞–Ω–∏–µ: {}", device_config.device_info.name);
        println!("     –¢–∏–ø: {:?}", device_config.device_info.device_type);
        println!("     –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {}", device_config.device_info.vendor);
        println!("     –ú–æ–¥–µ–ª—å: {}", device_config.device_info.model);
        println!("     –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {:?}", device_config.connection.transport);
        println!("     –•–æ—Å—Ç: {}", device_config.connection.host);
        println!("     –ö–æ–º–∞–Ω–¥ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {}", device_config.command_sequence.len());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        for (i, command) in device_config.command_sequence.iter().enumerate() {
            match &command.step_type {
                StepType::Command { command: cmd, expected_prompt } => {
                    println!("       {}. {} -> –∫–æ–º–∞–Ω–¥–∞: '{}'", i+1, command.name, cmd);
                    if let Some(prompt) = expected_prompt {
                        println!("          –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–º–ø—Ç: '{}'", prompt);
                    }
                }
                StepType::Login => {
                    println!("       {}. {} -> –ª–æ–≥–∏–Ω", i+1, command.name);
                }
                StepType::Logout => {
                    println!("       {}. {} -> –≤—ã—Ö–æ–¥", i+1, command.name);
                }
                StepType::Delay { milliseconds } => {
                    println!("       {}. {} -> –ø–∞—É–∑–∞ {} –º—Å", i+1, command.name, milliseconds);
                }
                StepType::WaitPrompt { prompt } => {
                    println!("       {}. {} -> –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ '{}'", i+1, command.name, prompt);
                }
                StepType::CheckResponse { contains, fail_if_not_found } => {
                    println!("       {}. {} -> –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è '{}' (–∫—Ä–∏—Ç–∏—á–Ω–æ: {})", 
                        i+1, command.name, contains, fail_if_not_found);
                }
            }
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    if !config.scenarios.is_empty() {
        println!("\nüé≠ –°—Ü–µ–Ω–∞—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}", config.scenarios.len());
        for (scenario_name, scenario) in &config.scenarios {
            println!("\n  üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {}", scenario_name);
            println!("     –ù–∞–∑–≤–∞–Ω–∏–µ: {}", scenario.name);
            if let Some(desc) = &scenario.description {
                println!("     –û–ø–∏—Å–∞–Ω–∏–µ: {}", desc);
            }
            println!("     –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {:?}", scenario.execution_mode);
            println!("     –¶–µ–ª–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {:?}", scenario.target_devices);
            println!("     –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {}", scenario.commands.len());
        }
    }
    
    println!("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:");
    println!("   ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å universal_config.toml –¥–ª—è —Å–≤–æ–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
    println!("   ‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ (—Ä–æ—É—Ç–µ—Ä—ã, –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä—ã, —Å–µ—Ä–≤–µ—Ä—ã)");
    println!("   ‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
    println!("   ‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ");
    
    Ok(())
} 